{"Name":"iCarousel","Id":2979,"Alias":"icarousel","Description":"iCarousel is a class designed to simplify the implementation of various types of carousel (paged, scrolling views) on iPhone, iPad and Mac OS. \n\niCarousel implements a number of common effects such as cylindrical, flat and \"CoverFlow\" style carousels, as well as providing hooks to implement your own bespoke effects. Unlike many other \"CoverFlow\" libraries, iCarousel can work with any kind of view, not just images, so it is ideal for presenting paged data in a fluid and impressive way in your app. It also makes it extremely easy to swap between different carousel effects with minimal code changes.\n\nHere\u0027s an example:\n\n```csharp\nusing Carousels;\n...\n\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n    // create and add the Carousel to the view\n    carousel = new iCarousel ();\n    carousel.Type = iCarouselType.CoverFlow2;\n    carousel.DataSource = new CarouselDataSource ();\n    carousel.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;\n    View.AddSubview (carousel);\n    \n    // handle item selections / taps\n    carousel.ItemSelected += (sender, args) =\u003e {\n        var indexSelected = args.Index;\n        // do something with a selection\n    };\n}\n\n// a data source that displays 100 items\nprivate class CarouselDataSource : iCarouselDataSource\n{\n\tint[] items;\n\t\n\tpublic CarouselDataSource()\n\t{\n\t\t// create our amazing data source\n\t\titems = Enumerable.Range (0, 100).ToArray ();\n\t}\n\n    // let the carousel know how many items to render\n\tpublic override nint GetNumberOfItems (iCarousel carousel)\n\t{\n\t\t// return the number of items in the data\n\t\treturn items.Length;\n\t}\n\n    // create the view each item in the carousel\n\tpublic override UIView GetViewForItem (iCarousel carousel, nint index, UIView view)\n\t{\n\t\tUILabel label = null;\n\t\tUIImageView imageView = null;\n\n\t\tif (view == null)\n\t\t{\n\t\t\t// create new view if no view is available for recycling\n\t\t\timageView = new UIImageView(new CGRect(0, 0, 200.0f, 200.0f));\n\t\t\timageView.Image = UIImage.FromBundle(\"page.png\");\n\t\t\timageView.ContentMode = UIViewContentMode.Center;\n\n\t\t\tlabel = new UILabel(imageView.Bounds);\n\t\t\tlabel.BackgroundColor = UIColor.Clear;\n\t\t\tlabel.TextAlignment = UITextAlignment.Center;\n\t\t\tlabel.Font = label.Font.WithSize(50);\n\t\t\tlabel.Tag = 1;\n\t\t\timageView.AddSubview(label);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// get a reference to the label in the recycled view\n\t\t\timageView = (UIImageView)view;\n\t\t\tlabel = (UILabel)view.ViewWithTag(1);\n\t\t}\n\n\t\t// set the values of the view\n\t\tlabel.Text = items [index].ToString ();\n\n\t\treturn imageView;\n\t}\n}\n\n```\n\n","Version":"1.8.2.1","Summary":"iCarousel is designed to simplify the implementation of various types of carousel (paged, scrolling views) on iPhone and iPad.","QuickStart":"iCarousel is a class designed to simplify the implementation of various types of carousel (paged, scrolling views) on iPhone, iPad and Mac OS. \n\niCarousel implements a number of common effects such as cylindrical, flat and \"CoverFlow\" style carousels, as well as providing hooks to implement your own bespoke effects. Unlike many other \"CoverFlow\" libraries, iCarousel can work with any kind of view, not just images, so it is ideal for presenting paged data in a fluid and impressive way in your app. It also makes it extremely easy to swap between different carousel effects with minimal code changes.\n\nHere\u0027s an example:\n\n```csharp\nusing Carousels;\n...\n\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n    // create and add the Carousel to the view\n    carousel = new iCarousel ();\n    carousel.Type = iCarouselType.CoverFlow2;\n    carousel.DataSource = new CarouselDataSource ();\n    carousel.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;\n    View.AddSubview (carousel);\n    \n    // handle item selections / taps\n    carousel.ItemSelected += (sender, args) =\u003e {\n        var indexSelected = args.Index;\n        // do something with a selection\n    };\n}\n\n// a data source that displays 100 items\nprivate class CarouselDataSource : iCarouselDataSource\n{\n\tint[] items;\n\t\n\tpublic CarouselDataSource()\n\t{\n\t\t// create our amazing data source\n\t\titems = Enumerable.Range (0, 100).ToArray ();\n\t}\n\n    // let the carousel know how many items to render\n\tpublic override nint GetNumberOfItems (iCarousel carousel)\n\t{\n\t\t// return the number of items in the data\n\t\treturn items.Length;\n\t}\n\n    // create the view each item in the carousel\n\tpublic override UIView GetViewForItem (iCarousel carousel, nint index, UIView view)\n\t{\n\t\tUILabel label = null;\n\t\tUIImageView imageView = null;\n\n\t\tif (view == null)\n\t\t{\n\t\t\t// create new view if no view is available for recycling\n\t\t\timageView = new UIImageView(new CGRect(0, 0, 200.0f, 200.0f));\n\t\t\timageView.Image = UIImage.FromBundle(\"page.png\");\n\t\t\timageView.ContentMode = UIViewContentMode.Center;\n\n\t\t\tlabel = new UILabel(imageView.Bounds);\n\t\t\tlabel.BackgroundColor = UIColor.Clear;\n\t\t\tlabel.TextAlignment = UITextAlignment.Center;\n\t\t\tlabel.Font = label.Font.WithSize(50);\n\t\t\tlabel.Tag = 1;\n\t\t\timageView.AddSubview(label);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// get a reference to the label in the recycled view\n\t\t\timageView = (UIImageView)view;\n\t\t\tlabel = (UILabel)view.ViewWithTag(1);\n\t\t}\n\n\t\t// set the values of the view\n\t\tlabel.Text = items [index].ToString ();\n\n\t\treturn imageView;\n\t}\n}\n\n```\n\n","Hash":"95b35cbfad95e78727f21c0614d9654d","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}